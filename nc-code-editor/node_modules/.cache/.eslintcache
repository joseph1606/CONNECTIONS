[{"/Users/andrewtimmer/repo_connection/new_connections/nc-code-editor/src/index.js":"1","/Users/andrewtimmer/repo_connection/new_connections/nc-code-editor/src/App.js":"2","/Users/andrewtimmer/repo_connection/new_connections/nc-code-editor/src/components/REPL.js":"3","/Users/andrewtimmer/repo_connection/new_connections/nc-code-editor/src/components/CSV.js":"4"},{"size":219,"mtime":1709312987106,"results":"5","hashOfConfig":"6"},{"size":198,"mtime":1710814325286,"results":"7","hashOfConfig":"6"},{"size":5361,"mtime":1711123929169,"results":"8","hashOfConfig":"6"},{"size":896,"mtime":1710951615664,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1q6p2uq",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"13"},"/Users/andrewtimmer/repo_connection/new_connections/nc-code-editor/src/index.js",[],[],[],"/Users/andrewtimmer/repo_connection/new_connections/nc-code-editor/src/App.js",[],[],"/Users/andrewtimmer/repo_connection/new_connections/nc-code-editor/src/components/REPL.js",["24"],[],"/Users/andrewtimmer/repo_connection/new_connections/nc-code-editor/src/components/CSV.js",["25"],[],"import React, { useState } from 'react';\n\nfunction read() {\n    var fr = new FileReader();\n    fr.onload = function () {\n        let lines = fr.result.split('\\r\\n')\n        lines.forEach(myFunction);\n\n        function myFunction(value, index, array) {\n            lines[index] = lines[index].split(',')\n        }\n        console.log(lines)\n        document.getElementById('header').textContent = lines[0];\n        document.getElementById('output').textContent = lines[1];\n    }\n    /*\n    payload['code'] = \"graphwithcsv1(csv)\"\n    payload['code'] = \"graphwithcsv2(csv)\"\n    */\n    fr.readAsText(document.getElementById('csvreader').files[0]);\n}\n\n\nconst CSV = () => {\n    return (\n        <div>\n            <input id='csvreader' type=\"file\" accept=\".csv\" onChange={read} />\n            <h2 id='header'>Header</h2>\n            <p id='output'>Output</p>\n        </div>\n    )\n}\n\nexport default CSV  ",{"ruleId":"26","severity":1,"message":"27","line":47,"column":53,"nodeType":"28","messageId":"29","endLine":47,"endColumn":55},{"ruleId":"30","severity":1,"message":"31","line":1,"column":17,"nodeType":"32","messageId":"33","endLine":1,"endColumn":25},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar"]