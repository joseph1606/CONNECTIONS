{"ast":null,"code":"var _jsxFileName = \"/Users/walterosborne/Spring 2024/CMSC435/new_connections/nc-code-editor/src/components/CSV.js\";\nimport React, { useState } from 'react';\nimport './REPL.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction read() {\n  let fr = new FileReader();\n  console.log(fr.result);\n  let lines = fr.result.split('\\n');\n  lines.forEach(myFunction);\n\n  function myFunction(value, index, array) {\n    lines[index] = lines[index].split(',');\n  }\n\n  fr.onload = function () {\n    document.getElementById('output').textContent = lines;\n  };\n\n  fr.readAsText(this.files[0]);\n}\n\nconst CSV = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"csvreader\",\n      type: \"file\",\n      accept: \".csv\",\n      onChange: read\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_c = CSV;\nexport default CSV;\n\nvar _c;\n\n$RefreshReg$(_c, \"CSV\");","map":{"version":3,"names":["React","useState","read","fr","FileReader","console","log","result","lines","split","forEach","myFunction","value","index","array","onload","document","getElementById","textContent","readAsText","files","CSV"],"sources":["/Users/walterosborne/Spring 2024/CMSC435/new_connections/nc-code-editor/src/components/CSV.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './REPL.css'\n\nfunction read() {\n    let fr = new FileReader();\n    console.log(fr.result)\n    let lines = fr.result.split('\\n')\n    lines.forEach(myFunction);\n\n    function myFunction(value, index, array) {\n        lines[index] = lines[index].split(',')\n    }\n\n\n    fr.onload = function () {\n        document.getElementById('output')\n            .textContent = lines;\n    }\n\n    fr.readAsText(this.files[0]);\n\n}\n\nconst CSV = () => {\n    return (\n        <div>\n            <input id='csvreader' type=\"file\" accept=\".csv\" onChange={read} />\n            <p id='output'></p></div>\n    )\n}\n\nexport default CSV"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,YAAP;;;AAEA,SAASC,IAAT,GAAgB;EACZ,IAAIC,EAAE,GAAG,IAAIC,UAAJ,EAAT;EACAC,OAAO,CAACC,GAAR,CAAYH,EAAE,CAACI,MAAf;EACA,IAAIC,KAAK,GAAGL,EAAE,CAACI,MAAH,CAAUE,KAAV,CAAgB,IAAhB,CAAZ;EACAD,KAAK,CAACE,OAAN,CAAcC,UAAd;;EAEA,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,KAAlC,EAAyC;IACrCN,KAAK,CAACK,KAAD,CAAL,GAAeL,KAAK,CAACK,KAAD,CAAL,CAAaJ,KAAb,CAAmB,GAAnB,CAAf;EACH;;EAGDN,EAAE,CAACY,MAAH,GAAY,YAAY;IACpBC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EACKC,WADL,GACmBV,KADnB;EAEH,CAHD;;EAKAL,EAAE,CAACgB,UAAH,CAAc,KAAKC,KAAL,CAAW,CAAX,CAAd;AAEH;;AAED,MAAMC,GAAG,GAAG,MAAM;EACd,oBACI;IAAA,wBACI;MAAO,EAAE,EAAC,WAAV;MAAsB,IAAI,EAAC,MAA3B;MAAkC,MAAM,EAAC,MAAzC;MAAgD,QAAQ,EAAEnB;IAA1D;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAG,EAAE,EAAC;IAAN;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAND;;KAAMmB,G;AAQN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}